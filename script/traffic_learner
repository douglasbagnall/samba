#!/usr/bin/env python

import sys
import argparse
from collections import Counter
import json
import random
import math

sys.path.insert(0, "bin/python")
from samba.emulate import traffic


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-o', '--out', type=argparse.FileType('w'),
                        help="write model here")
    parser.add_argument('-r', '--replay', action='store_true',
                        help='replay a sample conversation')
    parser.add_argument('--dns-mode', choices=['ignore', 'include', 'count'],
                        help='how to deal with DNS', default='count')
    parser.add_argument('SUMMARY_FILE', nargs='+', type=argparse.FileType('r'),
                        default=sys.stdin,
                        help="read from this file (default STDIN)")
    args = parser.parse_args()

    if not args.out or args.replay:
        print >> sys.stdout, ("you asked me to create a model without "
                              "saving or using it.")
        print >> sys.stdout, ("I could do that but it seems a bit pointless.")
        print >> sys.stdout, ("Try using '-r' or '-o'")
        return

    if args.SUMMARY_FILE is sys.stdin:
        print >> sys.stderr, "reading from STDIN..."

    conversations, interval, dns_rate = traffic.ingest_summaries(args.SUMMARY_FILE)

    model = traffic.TrafficModel(dns_mode=args.dns_mode)
    print >> sys.stderr, "learning model"
    model.learn(conversations)
    if args.replay:
        c = model.construct_conversation()
        c.replay()
    if args.out:
        model.save(args.out)

main()
